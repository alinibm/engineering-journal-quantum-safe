AWSTemplateFormatVersion: '2010-09-09'
Description: This template creates a Multi-AZ, multi-subnet VPC infrastructure
  with managed NAT gateways in the public subnet for each Availability Zone. You
  can also create additional private subnets with dedicated custom network
  access control lists (ACLs). If you deploy the Quick Start in a region that
  doesn't support NAT gateways, NAT instances are deployed instead.
Metadata:
  QuickStartDocumentation:
    EntrypointName: Launch a New VPC
    OptionalParameters:
      - PrivateSubnet1Tag1
      - PrivateSubnet1Tag2
      - PrivateSubnet1Tag3
      - PrivateSubnet2Tag1
      - PrivateSubnet2Tag2
      - PrivateSubnet2Tag3
      - PrivateSubnet3Tag1
      - PrivateSubnet3Tag2
      - PrivateSubnet3Tag3
      - PublicSubnet1Tag1
      - PublicSubnet1Tag2
      - PublicSubnet1Tag3
      - PublicSubnet2Tag1
      - PublicSubnet2Tag2
      - PublicSubnet2Tag3
      - PublicSubnet3Tag1
      - PublicSubnet3Tag2
      - PublicSubnet3Tag3

Parameters:
  ClusterName:
    Description: Custom cluster name.
    Type: String
  AvailabilityZones:
    Description: 'List of Availability Zones to use for the subnets in the VPC.
      Note: The logical order is preserved.'
    Type: List<AWS::EC2::AvailabilityZone::Name>
  CreateNATGateways:
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'true'
    Description: Set to false when creating only private subnets. If True, both
      CreatePublicSubnets and CreatePrivateSubnets must also be true.
    Type: String
  CreatePublicSubnets:
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'true'
    Description: Set to false to create only private subnets. If false,
      CreatePrivateSubnets must be True and the CIDR parameters for ALL public
      subnets will be ignored
    Type: String
  CreatePrivateSubnets:
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'true'
    Description: Set to false to create only public subnets. If false, the CIDR
      parameters for ALL private subnets will be ignored.
    Type: String
  KeyPairName:
    Description: Deprecated. NAT gateways are now supported in all regions.
    Type: String
    Default: deprecated
  NATInstanceType:
    Default: deprecated
    Description: Deprecated. NAT gateways are now supported in all regions.
    Type: String
  NumberOfAZs:
    AllowedValues:
      - '2'
      - '3'
    Default: '3'
    Description: Number of Availability Zones to use in the VPC. This must match
      your selections in the list of Availability Zones parameter.
    Type: String
  PrivateSubnet1CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 192.168.0.0/19
    Description: CIDR block for private subnet 1A located in Availability Zone 1
    Type: String
  PrivateSubnet2CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 192.168.32.0/19
    Description: CIDR block for private subnet 2A located in Availability Zone 2
    Type: String
  PrivateSubnet3CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 192.168.64.0/19
    Description: CIDR block for private subnet 3A located in Availability Zone 3
    Type: String
  PrivateSubnet1Tag1:
    AllowedPattern: ^([a-zA-Z0-9+\-._:/@]+=[a-zA-Z0-9+\-.,_:/@ *\\"'\[\]\{\}]*)?$
    ConstraintDescription: tags must be in format "Key=Value" keys can only contain
      [a-zA-Z0-9+\-._:/@], values can contain [a-zA-Z0-9+\-._:/@ *\\"'\[\]\{\}]
    Default: Network=Private
    Description: tag to add to private subnets A, in format Key=Value (Optional)
    Type: String
  PrivateSubnet1Tag2:
    AllowedPattern: ^([a-zA-Z0-9+\-._:/@]+=[a-zA-Z0-9+\-.,_:/@ *\\"'\[\]\{\}]*)?$
    ConstraintDescription: tags must be in format "Key=Value" keys can only contain
      [a-zA-Z0-9+\-._:/@], values can contain [a-zA-Z0-9+\-._:/@ *\\"'\[\]\{\}]
    Default: ''
    Description: tag to add to private subnets A, in format Key=Value (Optional)
    Type: String
  PrivateSubnet1Tag3:
    AllowedPattern: ^([a-zA-Z0-9+\-._:/@]+=[a-zA-Z0-9+\-.,_:/@ *\\"'\[\]\{\}]*)?$
    ConstraintDescription: tags must be in format "Key=Value" keys can only contain
      [a-zA-Z0-9+\-._:/@], values can contain [a-zA-Z0-9+\-._:/@ *\\"'\[\]\{\}]
    Default: ''
    Description: tag to add to private subnets A, in format Key=Value (Optional)
    Type: String
  PrivateSubnet2Tag1:
    AllowedPattern: ^([a-zA-Z0-9+\-._:/@]+=[a-zA-Z0-9+\-.,_:/@ *\\"'\[\]\{\}]*)?$
    ConstraintDescription: tags must be in format "Key=Value" keys can only contain
      [a-zA-Z0-9+\-._:/@], values can contain [a-zA-Z0-9+\-._:/@ *\\"'\[\]\{\}]
    Default: Network=Private
    Description: tag to add to private subnets B, in format Key=Value (Optional)
    Type: String
  PrivateSubnet2Tag2:
    AllowedPattern: ^([a-zA-Z0-9+\-._:/@]+=[a-zA-Z0-9+\-.,_:/@ *\\"'\[\]\{\}]*)?$
    ConstraintDescription: tags must be in format "Key=Value" keys can only contain
      [a-zA-Z0-9+\-._:/@], values can contain [a-zA-Z0-9+\-._:/@ *\\"'\[\]\{\}]
    Default: ''
    Description: tag to add to private subnets B, in format Key=Value (Optional)
    Type: String
  PrivateSubnet2Tag3:
    AllowedPattern: ^([a-zA-Z0-9+\-._:/@]+=[a-zA-Z0-9+\-.,_:/@ *\\"'\[\]\{\}]*)?$
    ConstraintDescription: tags must be in format "Key=Value" keys can only contain
      [a-zA-Z0-9+\-._:/@], values can contain [a-zA-Z0-9+\-._:/@ *\\"'\[\]\{\}]
    Default: ''
    Description: tag to add to private subnets B, in format Key=Value (Optional)
    Type: String
  PrivateSubnet3Tag1:
    AllowedPattern: ^([a-zA-Z0-9+\-._:/@]+=[a-zA-Z0-9+\-.,_:/@ *\\"'\[\]\{\}]*)?$
    ConstraintDescription: tags must be in format "Key=Value" keys can only contain
      [a-zA-Z0-9+\-._:/@], values can contain [a-zA-Z0-9+\-._:/@ *\\"'\[\]\{\}]
    Default: Network=Private
    Description: tag to add to private subnets B, in format Key=Value (Optional)
    Type: String
  PrivateSubnet3Tag2:
    AllowedPattern: ^([a-zA-Z0-9+\-._:/@]+=[a-zA-Z0-9+\-.,_:/@ *\\"'\[\]\{\}]*)?$
    ConstraintDescription: tags must be in format "Key=Value" keys can only contain
      [a-zA-Z0-9+\-._:/@], values can contain [a-zA-Z0-9+\-._:/@ *\\"'\[\]\{\}]
    Default: ''
    Description: tag to add to private subnets B, in format Key=Value (Optional)
    Type: String
  PrivateSubnet3Tag3:
    AllowedPattern: ^([a-zA-Z0-9+\-._:/@]+=[a-zA-Z0-9+\-.,_:/@ *\\"'\[\]\{\}]*)?$
    ConstraintDescription: tags must be in format "Key=Value" keys can only contain
      [a-zA-Z0-9+\-._:/@], values can contain [a-zA-Z0-9+\-._:/@ *\\"'\[\]\{\}]
    Default: ''
    Type: String
  PublicSubnet1CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 192.168.96.0/21
    Description: CIDR block for the public DMZ subnet 1 located in Availability Zone 1
    Type: String
  PublicSubnet2CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 192.168.104.0/20
    Description: CIDR block for the public DMZ subnet 2 located in Availability Zone 2
    Type: String
  PublicSubnet3CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 192.168.112.0/21
    Description: CIDR block for the public DMZ subnet 3 located in Availability Zone 3
    Type: String
  PublicSubnet1Tag1:
    AllowedPattern: ^([a-zA-Z0-9+\-._:/@]+=[a-zA-Z0-9+\-.,_:/@ *\\"'\[\]\{\}]*)?$
    ConstraintDescription: tags must be in format "Key=Value" keys can only contain
      [a-zA-Z0-9+\-._:/@], values can contain [a-zA-Z0-9+\-._:/@ *\\"'\[\]\{\}]
    Default: Network=Public
    Description: tag to add to public subnets, in format Key=Value (Optional)
    Type: String
  PublicSubnet1Tag2:
    AllowedPattern: ^([a-zA-Z0-9+\-._:/@]+=[a-zA-Z0-9+\-.,_:/@ *\\"'\[\]\{\}]*)?$
    ConstraintDescription: tags must be in format "Key=Value" keys can only contain
      [a-zA-Z0-9+\-._:/@], values can contain [a-zA-Z0-9+\-._:/@ *\\"'\[\]\{\}]
    Default: ''
    Description: tag to add to public subnets, in format Key=Value (Optional)
    Type: String
  PublicSubnet1Tag3:
    AllowedPattern: ^([a-zA-Z0-9+\-._:/@]+=[a-zA-Z0-9+\-.,_:/@ *\\"'\[\]\{\}]*)?$
    ConstraintDescription: tags must be in format "Key=Value" keys can only contain
      [a-zA-Z0-9+\-._:/@], values can contain [a-zA-Z0-9+\-._:/@ *\\"'\[\]\{\}]
    Default: ''
    Description: tag to add to public subnets, in format Key=Value (Optional)
    Type: String
  PublicSubnet2Tag1:
    AllowedPattern: ^([a-zA-Z0-9+\-._:/@]+=[a-zA-Z0-9+\-.,_:/@ *\\"'\[\]\{\}]*)?$
    ConstraintDescription: tags must be in format "Key=Value" keys can only contain
      [a-zA-Z0-9+\-._:/@], values can contain [a-zA-Z0-9+\-._:/@ *\\"'\[\]\{\}]
    Default: ''
    Description: tag to add to public subnets, in format Key=Value (Optional)
    Type: String
  PublicSubnet2Tag2:
    AllowedPattern: ^([a-zA-Z0-9+\-._:/@]+=[a-zA-Z0-9+\-.,_:/@ *\\"'\[\]\{\}]*)?$
    ConstraintDescription: tags must be in format "Key=Value" keys can only contain
      [a-zA-Z0-9+\-._:/@], values can contain [a-zA-Z0-9+\-._:/@ *\\"'\[\]\{\}]
    Default: ''
    Description: tag to add to public subnets, in format Key=Value (Optional)
    Type: String
  PublicSubnet2Tag3:
    AllowedPattern: ^([a-zA-Z0-9+\-._:/@]+=[a-zA-Z0-9+\-.,_:/@ *\\"'\[\]\{\}]*)?$
    ConstraintDescription: tags must be in format "Key=Value" keys can only contain
      [a-zA-Z0-9+\-._:/@], values can contain [a-zA-Z0-9+\-._:/@ *\\"'\[\]\{\}]
    Default: ''
    Description: tag to add to public subnets, in format Key=Value (Optional)
    Type: String
  PublicSubnet3Tag1:
    AllowedPattern: ^([a-zA-Z0-9+\-._:/@]+=[a-zA-Z0-9+\-.,_:/@ *\\"'\[\]\{\}]*)?$
    ConstraintDescription: tags must be in format "Key=Value" keys can only contain
      [a-zA-Z0-9+\-._:/@], values can contain [a-zA-Z0-9+\-._:/@ *\\"'\[\]\{\}]
    Default: ''
    Description: tag to add to public subnets, in format Key=Value (Optional)
    Type: String
  PublicSubnet3Tag2:
    AllowedPattern: ^([a-zA-Z0-9+\-._:/@]+=[a-zA-Z0-9+\-.,_:/@ *\\"'\[\]\{\}]*)?$
    ConstraintDescription: tags must be in format "Key=Value" keys can only contain
      [a-zA-Z0-9+\-._:/@], values can contain [a-zA-Z0-9+\-._:/@ *\\"'\[\]\{\}]
    Default: ''
    Description: tag to add to public subnets, in format Key=Value (Optional)
    Type: String
  PublicSubnet3Tag3:
    AllowedPattern: ^([a-zA-Z0-9+\-._:/@]+=[a-zA-Z0-9+\-.,_:/@ *\\"'\[\]\{\}]*)?$
    ConstraintDescription: tags must be in format "Key=Value" keys can only contain
      [a-zA-Z0-9+\-._:/@], values can contain [a-zA-Z0-9+\-._:/@ *\\"'\[\]\{\}]
    Default: ''
    Description: tag to add to public subnets, in format Key=Value (Optional)
    Type: String
  VPCCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 192.168.0.0/16
    Description: CIDR block for the VPC
    Type: String
  VPCTenancy:
    AllowedValues:
      - default
      - dedicated
    Default: default
    Description: The allowed tenancy of instances launched into the VPC
    Type: String
  VPCDNSNameResolution:
    AllowedValues:
      - true
      - false
    Default: false
    Description: Indicates whether DNS resolution is supported for the VPC
    Type: String
  VPCDNSNameCreation:
    AllowedValues:
      - true
      - false
    Default: false
    Description: Indicates that instances spun up in the VPC get dns resolvable hostnames
    Type: String
Rules:
  NAT:
    RuleCondition: !Equals
      - !Ref CreateNATGateways
      - 'true'
    Assertions:
      - Assert: !And
          - !Equals
            - !Ref CreatePrivateSubnets
            - 'true'
          - !Equals
            - !Ref CreatePublicSubnets
            - 'true'
        AssertDescription: To enable NAT gateways you must have both
          CreatePrivateSubnets and CreatePublicSubnets set to 'true'
  Subnets:
    Assertions:
      - Assert: !Or
          - !Equals
            - !Ref CreatePrivateSubnets
            - 'true'
          - !Equals
            - !Ref CreatePublicSubnets
            - 'true'
        AssertDescription: At least one of CreatePublicSubnets or CreatePrivateSubnets
          must be set to 'true'
Conditions:
  3AZCondition: !Equals
    - !Ref NumberOfAZs
    - '3'
  NATGatewaysCondition: !Equals
    - !Ref CreateNATGateways
    - 'true'
  NATGateways&3AZCondition: !And
    - !Condition NATGatewaysCondition
    - !Condition 3AZCondition
  NVirginiaRegionCondition: !Equals
    - !Ref AWS::Region
    - us-east-1
  PrivateSubnetsCondition: !Equals
    - !Ref CreatePrivateSubnets
    - 'true'
  PrivateSubnets&3AZCondition: !And
    - !Condition PrivateSubnetsCondition
    - !Condition 3AZCondition
  PublicSubnetsCondition: !Equals
    - !Ref CreatePublicSubnets
    - 'true'
  PublicSubnets&3AZCondition: !And
    - !Condition PublicSubnetsCondition
    - !Condition 3AZCondition
  PrivateSubnet1Tag1Condition: !Not
    - !Equals
      - !Ref PrivateSubnet1Tag1
      - ''
  PrivateSubnet1Tag2Condition: !Not
    - !Equals
      - !Ref PrivateSubnet1Tag2
      - ''
  PrivateSubnet1Tag3Condition: !Not
    - !Equals
      - !Ref PrivateSubnet1Tag3
      - ''
  PrivateSubnet2Tag1Condition: !Not
    - !Equals
      - !Ref PrivateSubnet2Tag1
      - ''
  PrivateSubnet2Tag2Condition: !Not
    - !Equals
      - !Ref PrivateSubnet2Tag2
      - ''
  PrivateSubnet2Tag3Condition: !Not
    - !Equals
      - !Ref PrivateSubnet2Tag3
      - ''
  PrivateSubnet3Tag1Condition: !Not
    - !Equals
      - !Ref PrivateSubnet3Tag1
      - ''
  PrivateSubnet3Tag2Condition: !Not
    - !Equals
      - !Ref PrivateSubnet3Tag2
      - ''
  PrivateSubnet3Tag3Condition: !Not
    - !Equals
      - !Ref PrivateSubnet3Tag3
      - ''
  PublicSubnet1Tag1Condition: !Not
    - !Equals
      - !Ref PublicSubnet1Tag1
      - ''
  PublicSubnet1Tag2Condition: !Not
    - !Equals
      - !Ref PublicSubnet1Tag2
      - ''
  PublicSubnet1Tag3Condition: !Not
    - !Equals
      - !Ref PublicSubnet1Tag3
      - ''
  PublicSubnet2Tag1Condition: !Not
    - !Equals
      - !Ref PublicSubnet2Tag1
      - ''
  PublicSubnet2Tag2Condition: !Not
    - !Equals
      - !Ref PublicSubnet2Tag2
      - ''
  PublicSubnet2Tag3Condition: !Not
    - !Equals
      - !Ref PublicSubnet2Tag3
      - ''
  PublicSubnet3Tag1Condition: !Not
    - !Equals
      - !Ref PublicSubnet3Tag1
      - ''
  PublicSubnet3Tag2Condition: !Not
    - !Equals
      - !Ref PublicSubnet3Tag2
      - ''
  PublicSubnet3Tag3Condition: !Not
    - !Equals
      - !Ref PublicSubnet3Tag3
      - ''
Resources:
  DHCPOptions:
    Type: AWS::EC2::DHCPOptions
    Properties:
      DomainName: !If
        - NVirginiaRegionCondition
        - ec2.internal
        - !Sub ${AWS::Region}.compute.internal
      DomainNameServers:
        - AmazonProvidedDNS
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCIDR
      InstanceTenancy: !Ref VPCTenancy
      EnableDnsSupport: !Ref VPCDNSNameResolution
      EnableDnsHostnames: !Ref VPCDNSNameCreation
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
  VPCDHCPOptionsAssociation:
    Type: AWS::EC2::VPCDHCPOptionsAssociation
    Properties:
      VpcId: !Ref VPC
      DhcpOptionsId: !Ref DHCPOptions
  InternetGateway:
    Condition: PublicSubnetsCondition
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
  VPCGatewayAttachment:
    Condition: PublicSubnetsCondition
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PrivateSubnet1:
    Condition: PrivateSubnetsCondition
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet1CIDR
      AvailabilityZone: !Select
        - '0'
        - !Ref AvailabilityZones
      Tags:
        - Key: kubernetes.io/role/internal-elb
          Value: 1
        - Key: !Sub kubernetes.io/cluster/${ClusterName}
          Value: shared
        - Key: Name
          Value: Private subnet 1
        - !If
          - PrivateSubnet1Tag1Condition
          - Key: !Select
              - '0'
              - !Split
                - '='
                - !Ref PrivateSubnet1Tag1
            Value: !Select
              - '1'
              - !Split
                - '='
                - !Ref PrivateSubnet1Tag1
          - !Ref AWS::NoValue
        - !If
          - PrivateSubnet1Tag2Condition
          - Key: !Select
              - '0'
              - !Split
                - '='
                - !Ref PrivateSubnet1Tag2
            Value: !Select
              - '1'
              - !Split
                - '='
                - !Ref PrivateSubnet1Tag2
          - !Ref AWS::NoValue
        - !If
          - PrivateSubnet1Tag3Condition
          - Key: !Select
              - '0'
              - !Split
                - '='
                - !Ref PrivateSubnet1Tag3
            Value: !Select
              - '1'
              - !Split
                - '='
                - !Ref PrivateSubnet1Tag3
          - !Ref AWS::NoValue
  PrivateSubnet2:
    Condition: PrivateSubnetsCondition
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet2CIDR
      AvailabilityZone: !Select
        - '1'
        - !Ref AvailabilityZones
      Tags:
        - Key: !Sub kubernetes.io/cluster/${ClusterName}
          Value: shared
        - Key: kubernetes.io/role/internal-elb
          Value: 1
        - Key: Name
          Value: Private subnet 2
        - !If
          - PrivateSubnet2Tag1Condition
          - Key: !Select
              - '0'
              - !Split
                - '='
                - !Ref PrivateSubnet2Tag1
            Value: !Select
              - '1'
              - !Split
                - '='
                - !Ref PrivateSubnet2Tag1
          - !Ref AWS::NoValue
        - !If
          - PrivateSubnet2Tag2Condition
          - Key: !Select
              - '0'
              - !Split
                - '='
                - !Ref PrivateSubnet2Tag2
            Value: !Select
              - '1'
              - !Split
                - '='
                - !Ref PrivateSubnet2Tag2
          - !Ref AWS::NoValue
        - !If
          - PrivateSubnet2Tag3Condition
          - Key: !Select
              - '0'
              - !Split
                - '='
                - !Ref PrivateSubnet2Tag3
            Value: !Select
              - '1'
              - !Split
                - '='
                - !Ref PrivateSubnet2Tag3
          - !Ref AWS::NoValue
  PrivateSubnet3:
    Condition: PrivateSubnets&3AZCondition
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet3CIDR
      AvailabilityZone: !Select
        - '2'
        - !Ref AvailabilityZones
      Tags:
        - Key: !Sub kubernetes.io/cluster/${ClusterName}
          Value: shared
        - Key: kubernetes.io/role/internal-elb
          Value: 1
        - Key: Name
          Value: Private subnet 3
        - !If
          - PrivateSubnet3Tag1Condition
          - Key: !Select
              - '0'
              - !Split
                - '='
                - !Ref PrivateSubnet3Tag1
            Value: !Select
              - '1'
              - !Split
                - '='
                - !Ref PrivateSubnet3Tag1
          - !Ref AWS::NoValue
        - !If
          - PrivateSubnet3Tag2Condition
          - Key: !Select
              - '0'
              - !Split
                - '='
                - !Ref PrivateSubnet3Tag2
            Value: !Select
              - '1'
              - !Split
                - '='
                - !Ref PrivateSubnet3Tag2
          - !Ref AWS::NoValue
        - !If
          - PrivateSubnet3Tag3Condition
          - Key: !Select
              - '0'
              - !Split
                - '='
                - !Ref PrivateSubnet3Tag3
            Value: !Select
              - '1'
              - !Split
                - '='
                - !Ref PrivateSubnet3Tag3
          - !Ref AWS::NoValue
  PublicSubnet1:
    Condition: PublicSubnetsCondition
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet1CIDR
      AvailabilityZone: !Select
        - '0'
        - !Ref AvailabilityZones
      Tags:
        - Key: !Sub kubernetes.io/cluster/${ClusterName}
          Value: shared
        - Key: kubernetes.io/role/elb
          Value: 1
        - Key: Name
          Value: Public subnet 1
        - !If
          - PublicSubnet1Tag1Condition
          - Key: !Select
              - '0'
              - !Split
                - '='
                - !Ref PublicSubnet1Tag1
            Value: !Select
              - '1'
              - !Split
                - '='
                - !Ref PublicSubnet1Tag1
          - !Ref AWS::NoValue
        - !If
          - PublicSubnet1Tag2Condition
          - Key: !Select
              - '0'
              - !Split
                - '='
                - !Ref PublicSubnet1Tag2
            Value: !Select
              - '1'
              - !Split
                - '='
                - !Ref PublicSubnet1Tag2
          - !Ref AWS::NoValue
        - !If
          - PublicSubnet1Tag3Condition
          - Key: !Select
              - '0'
              - !Split
                - '='
                - !Ref PublicSubnet1Tag3
            Value: !Select
              - '1'
              - !Split
                - '='
                - !Ref PublicSubnet1Tag3
          - !Ref AWS::NoValue
      MapPublicIpOnLaunch: true
  PublicSubnet2:
    Condition: PublicSubnetsCondition
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet2CIDR
      AvailabilityZone: !Select
        - '1'
        - !Ref AvailabilityZones
      Tags:
        - Key: !Sub kubernetes.io/cluster/${ClusterName}
          Value: shared
        - Key: kubernetes.io/role/elb
          Value: 1
        - Key: Name
          Value: Public subnet 2
        - !If
          - PublicSubnet2Tag1Condition
          - Key: !Select
              - '0'
              - !Split
                - '='
                - !Ref PublicSubnet2Tag1
            Value: !Select
              - '1'
              - !Split
                - '='
                - !Ref PublicSubnet2Tag1
          - !Ref AWS::NoValue
        - !If
          - PublicSubnet2Tag2Condition
          - Key: !Select
              - '0'
              - !Split
                - '='
                - !Ref PublicSubnet2Tag2
            Value: !Select
              - '1'
              - !Split
                - '='
                - !Ref PublicSubnet2Tag2
          - !Ref AWS::NoValue
        - !If
          - PublicSubnet2Tag3Condition
          - Key: !Select
              - '0'
              - !Split
                - '='
                - !Ref PublicSubnet2Tag3
            Value: !Select
              - '1'
              - !Split
                - '='
                - !Ref PublicSubnet2Tag3
          - !Ref AWS::NoValue
      MapPublicIpOnLaunch: true
  PublicSubnet3:
    Condition: PublicSubnets&3AZCondition
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet3CIDR
      AvailabilityZone: !Select
        - '2'
        - !Ref AvailabilityZones
      Tags:
        - Key: !Sub kubernetes.io/cluster/${ClusterName}
          Value: shared
        - Key: kubernetes.io/role/elb
          Value: 1
        - Key: Name
          Value: Public subnet 3
        - !If
          - PublicSubnet3Tag1Condition
          - Key: !Select
              - '0'
              - !Split
                - '='
                - !Ref PublicSubnet3Tag1
            Value: !Select
              - '1'
              - !Split
                - '='
                - !Ref PublicSubnet3Tag1
          - !Ref AWS::NoValue
        - !If
          - PublicSubnet3Tag2Condition
          - Key: !Select
              - '0'
              - !Split
                - '='
                - !Ref PublicSubnet3Tag2
            Value: !Select
              - '1'
              - !Split
                - '='
                - !Ref PublicSubnet3Tag2
          - !Ref AWS::NoValue
        - !If
          - PublicSubnet3Tag3Condition
          - Key: !Select
              - '0'
              - !Split
                - '='
                - !Ref PublicSubnet3Tag3
            Value: !Select
              - '1'
              - !Split
                - '='
                - !Ref PublicSubnet3Tag3
          - !Ref AWS::NoValue
      MapPublicIpOnLaunch: true
  PrivateSubnet1RouteTable:
    Condition: PrivateSubnetsCondition
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Private subnet 1
        - Key: Network
          Value: Private
  PrivateSubnet1Route:
    Condition: NATGatewaysCondition
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateSubnet1RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway1
  PrivateSubnet1RouteTableAssociation:
    Condition: PrivateSubnetsCondition
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateSubnet1RouteTable
  PrivateSubnet2RouteTable:
    Condition: PrivateSubnetsCondition
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Private subnet 2
        - Key: Network
          Value: Private
  PrivateSubnet2Route:
    Condition: NATGatewaysCondition
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateSubnet2RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway2
  PrivateSubnet2RouteTableAssociation:
    Condition: PrivateSubnetsCondition
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateSubnet2RouteTable
  PrivateSubnet3RouteTable:
    Condition: PrivateSubnets&3AZCondition
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Private subnet 3
        - Key: Network
          Value: Private
  PrivateSubnet3Route:
    Condition: NATGateways&3AZCondition
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateSubnet3RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway3
  PrivateSubnet3RouteTableAssociation:
    Condition: PrivateSubnets&3AZCondition
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet3
      RouteTableId: !Ref PrivateSubnet3RouteTable
  PublicSubnetRouteTable:
    Condition: PublicSubnetsCondition
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public Subnets
        - Key: Network
          Value: Public
  PublicSubnetRoute:
    Condition: PublicSubnetsCondition
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnet1RouteTableAssociation:
    Condition: PublicSubnetsCondition
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicSubnetRouteTable
  PublicSubnet2RouteTableAssociation:
    Condition: PublicSubnetsCondition
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicSubnetRouteTable
  PublicSubnet3RouteTableAssociation:
    Condition: PublicSubnets&3AZCondition
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet3
      RouteTableId: !Ref PublicSubnetRouteTable
  NAT1EIP:
    Condition: NATGatewaysCondition
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NAT2EIP:
    Condition: NATGatewaysCondition
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NAT3EIP:
    Condition: NATGateways&3AZCondition
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NATGateway1:
    Condition: NATGatewaysCondition
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NAT1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1
  NATGateway2:
    Condition: NATGatewaysCondition
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NAT2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2
  NATGateway3:
    Condition: NATGateways&3AZCondition
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NAT3EIP.AllocationId
      SubnetId: !Ref PublicSubnet3
  S3VPCEndpoint:
    Condition: PrivateSubnetsCondition
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action: '*'
            Effect: Allow
            Resource: '*'
            Principal: '*'
      RouteTableIds:
        - !Ref PrivateSubnet1RouteTable
        - !Ref PrivateSubnet2RouteTable
        - !If
          - PrivateSubnets&3AZCondition
          - !Ref PrivateSubnet3RouteTable
          - !Ref AWS::NoValue
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcId: !Ref VPC
Outputs:
  NAT1EIP:
    Condition: NATGatewaysCondition
    Description: NAT 1 IP address
    Value: !Ref NAT1EIP
    Export:
      Name: !Sub ${AWS::StackName}-NAT1EIP
  NAT2EIP:
    Condition: NATGatewaysCondition
    Description: NAT 2 IP address
    Value: !Ref NAT2EIP
    Export:
      Name: !Sub ${AWS::StackName}-NAT2EIP
  NAT3EIP:
    Condition: NATGateways&3AZCondition
    Description: NAT 3 IP address
    Value: !Ref NAT3EIP
    Export:
      Name: !Sub ${AWS::StackName}-NAT3EIP
  PrivateSubnet1CIDR:
    Condition: PrivateSubnetsCondition
    Description: Private subnet 1 CIDR in Availability Zone 1
    Value: !Ref PrivateSubnet1CIDR
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet1ACIDR
  PrivateSubnet1ID:
    Condition: PrivateSubnetsCondition
    Description: Private subnet 1 ID in Availability Zone 1
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet1ID
  PrivateSubnet2CIDR:
    Condition: PrivateSubnetsCondition
    Description: Private subnet 2 CIDR in Availability Zone 2
    Value: !Ref PrivateSubnet2CIDR
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet2CIDR
  PrivateSubnet2ID:
    Condition: PrivateSubnetsCondition
    Description: Private subnet 2 ID in Availability Zone 2
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet2ID
  PrivateSubnet3CIDR:
    Condition: PrivateSubnets&3AZCondition
    Description: Private subnet 3 CIDR in Availability Zone 3
    Value: !Ref PrivateSubnet3CIDR
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet3CIDR
  PrivateSubnet3ID:
    Condition: PrivateSubnets&3AZCondition
    Description: Private subnet 3 ID in Availability Zone 3
    Value: !Ref PrivateSubnet3
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet3ID
  PublicSubnet1CIDR:
    Condition: PublicSubnetsCondition
    Description: Public subnet 1 CIDR in Availability Zone 1
    Value: !Ref PublicSubnet1CIDR
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet1CIDR
  PublicSubnet1ID:
    Condition: PublicSubnetsCondition
    Description: Public subnet 1 ID in Availability Zone 1
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet1ID
  PublicSubnet2CIDR:
    Condition: PublicSubnetsCondition
    Description: Public subnet 2 CIDR in Availability Zone 2
    Value: !Ref PublicSubnet2CIDR
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet2CIDR
  PublicSubnet2ID:
    Condition: PublicSubnetsCondition
    Description: Public subnet 2 ID in Availability Zone 2
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet2ID
  PublicSubnet3CIDR:
    Condition: PublicSubnets&3AZCondition
    Description: Public subnet 3 CIDR in Availability Zone 3
    Value: !Ref PublicSubnet3CIDR
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet3CIDR
  PublicSubnet3ID:
    Condition: PublicSubnets&3AZCondition
    Description: Public subnet 3 ID in Availability Zone 3
    Value: !Ref PublicSubnet3
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet3ID
  S3VPCEndpoint:
    Condition: PrivateSubnetsCondition
    Description: S3 VPC Endpoint
    Value: !Ref S3VPCEndpoint
    Export:
      Name: !Sub ${AWS::StackName}-S3VPCEndpoint
  PrivateSubnet1RouteTable:
    Condition: PrivateSubnetsCondition
    Value: !Ref PrivateSubnet1RouteTable
    Description: Private subnet 1 route table
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet1RouteTable
  PrivateSubnet2RouteTable:
    Condition: PrivateSubnetsCondition
    Value: !Ref PrivateSubnet2RouteTable
    Description: Private subnet 2 route table
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet2RouteTable
  PrivateSubnet3RouteTable:
    Condition: PrivateSubnets&3AZCondition
    Value: !Ref PrivateSubnet3RouteTable
    Description: Private subnet 3 route table
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet3RouteTable
  PublicSubnetRouteTable:
    Condition: PublicSubnetsCondition
    Value: !Ref PublicSubnetRouteTable
    Description: Public subnet route table
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnetRouteTable
  VPCCIDR:
    Value: !Ref VPCCIDR
    Description: VPC CIDR
    Export:
      Name: !Sub ${AWS::StackName}-VPCCIDR
  VPCID:
    Value: !Ref VPC
    Description: VPC ID
    Export:
      Name: !Sub ${AWS::StackName}-VPCID